import{unlocalizePathname as t,matchesPathname as n}from"../shared/utils.js";function e(t){return"string"==typeof t?{pathname:t}:t}function r(t){function n(t){return String(t)}const e=new URLSearchParams;for(const[r,a]of Object.entries(t))Array.isArray(a)?a.forEach((t=>{e.append(r,n(t))})):e.set(r,n(a));return"?"+e.toString()}function a(t){let{pathname:n,locale:e,params:a,pathnames:o,query:i}=t;function c(t){let n=o[t];return n||(n=t),n}function s(t){let n="string"==typeof t?t:t[e];return a&&Object.entries(a).forEach((t=>{let[e,r]=t;n=Array.isArray(r)?n.replace(new RegExp("(\\[)?\\[...".concat(e,"\\](\\])?"),"g"),r.map((t=>String(t))).join("/")):n.replace("[".concat(e,"]"),String(r))})),i&&(n+=r(i)),n}if("string"==typeof n){return s(c(n))}{const{pathname:t,...e}=n;return{...e,pathname:s(c(t))}}}function o(e){var r;let{locale:a,pathname:o,pathnames:i}=e;const c=t(o,a);let s=null===(r=Object.entries(i).find((t=>{let[,e]=t;const r="string"!=typeof e?e[a]:e;return n(r,c)})))||void 0===r?void 0:r[0];return s||(s=o),s}export{a as compileLocalizedPathname,o as getRoute,e as normalizeNameOrNameWithParams,r as serializeSearchParams};
