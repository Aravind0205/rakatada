'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('use-intl/core');
var getConfig = require('../server/getConfig.js');

const getMessageFormatCache = React.cache(() => new Map());
let hasWarned = false;
async function getTranslatorImpl(locale, namespace) {
  if (typeof locale === 'object') {
    const opts = locale;
    namespace = opts.namespace;
    locale = opts.locale;
    if (!hasWarned) {
      console.warn("\nDEPRECATION WARNING: Calling `getTranslator` with an object argument is deprecated, please update your call site accordingly.\n\n// Previously\ngetTranslator({locale: 'en', namespace: 'About'});\n\n// Now\ngetTranslator('en', 'About');\n\nSee also https://next-intl-docs.vercel.app/docs/environments/metadata-route-handlers\n");
      hasWarned = true;
    }
  }
  const config = await getConfig.default(locale);
  return core.createBaseTranslator({
    ...config,
    messageFormatCache: getMessageFormatCache(),
    namespace,
    messages: config.messages
  });
}
var getBaseTranslator = React.cache(getTranslatorImpl);

exports.default = getBaseTranslator;
