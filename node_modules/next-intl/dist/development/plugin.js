'use strict';

var fs = require('fs');
var path = require('path');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefault(fs);
var path__default = /*#__PURE__*/_interopDefault(path);

/* eslint-env node */

function resolveI18nPath(providedPath) {
  let i18nPath = providedPath;
  if (i18nPath) {
    i18nPath = path__default.default.resolve(i18nPath);
    if (!fs__default.default.existsSync(i18nPath)) {
      throw new Error("Could not find i18n config at ".concat(i18nPath, ", please provide a valid path."));
    }
  } else {
    i18nPath = ['./i18n.tsx', './i18n.ts', './i18n.js', './i18n.jsx', './src/i18n.tsx', './src/i18n.ts', './src/i18n.js', './src/i18n.jsx'].map(cur => path__default.default.resolve(cur)).find(cur => fs__default.default.existsSync(cur));
    if (!i18nPath) {
      throw new Error("\n\nCould not locate i18n config. Create one at `./(src/)i18n.{js,jsx,ts,tsx}` or specify a custom location:\n\nconst withNextIntl = require('next-intl/plugin')(\n  './path/to/i18n.tsx'\n);\n\nmodule.exports = withNextIntl({\n  // Other Next.js configuration ...\n});\n");
    }
  }
  return i18nPath;
}
function initPlugin(i18nPath, nextConfig) {
  if ((nextConfig === null || nextConfig === void 0 ? void 0 : nextConfig.i18n) != null) {
    console.warn("\nnext-intl has found an `i18n` config in your next.config.js. This likely causes conflicts and should therefore be removed if you use the App Router.\n\nIf you're in progress of migrating from the `pages` folder, you can refer to this example: https://github.com/amannn/next-intl/tree/feat/next-13-rsc/packages/example-next-13-with-pages\n");
  }
  return Object.assign({}, nextConfig, {
    webpack() {
      for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {
        _ref[_key] = arguments[_key];
      }
      let [config, options] = _ref;
      config.resolve.alias['next-intl/config'] = require.resolve(resolveI18nPath(i18nPath));
      if (typeof (nextConfig === null || nextConfig === void 0 ? void 0 : nextConfig.webpack) === 'function') {
        return nextConfig.webpack(config, options);
      }
      return config;
    }
  });
}
module.exports = function withNextIntl(i18nPath) {
  return nextConfig => initPlugin(i18nPath, nextConfig);
};
module.exports.initPlugin = initPlugin;
