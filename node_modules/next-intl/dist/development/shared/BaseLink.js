'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var NextLink = require('next/link');
var navigation = require('next/navigation');
var React = require('react');
var useLocale = require('../react-client/useLocale.js');
var utils = require('./utils.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var NextLink__default = /*#__PURE__*/_interopDefault(NextLink);
var React__default = /*#__PURE__*/_interopDefault(React);

function BaseLink(_ref, ref) {
  let {
    href,
    locale,
    prefetch,
    ...rest
  } = _ref;
  // The types aren't entirely correct here. Outside of Next.js
  // `useParams` can be called, but the return type is `null`.
  const pathname = navigation.usePathname();
  const defaultLocale = useLocale.default();
  const isChangingLocale = locale !== defaultLocale;
  const [localizedHref, setLocalizedHref] = React.useState(() => utils.isLocalHref(href) && locale ?
  // Potentially the href shouldn't be prefixed, but to determine this we
  // need a) the default locale and b) the information if we use prefixed
  // routing. During the server side render (both in RSC as well as SSR),
  // we don't have this information. Therefore we always prefix the href
  // since this will always result in a valid URL, even if it might cause
  // a redirect. This is better than pointing to a non-localized href
  // during the server render, which would potentially be wrong. The final
  // href is determined in the effect below.
  utils.prefixHref(href, locale) : href);
  React.useEffect(() => {
    if (!pathname) return;
    setLocalizedHref(utils.localizeHref(href, locale, defaultLocale, pathname !== null && pathname !== void 0 ? pathname : undefined));
  }, [defaultLocale, href, locale, pathname]);
  if (isChangingLocale) {
    if (prefetch && "development" !== 'production') {
      console.error('The `prefetch` prop is currently not supported when using the `locale` prop on `Link` to switch the locale.`');
    }
    prefetch = false;
  }
  return /*#__PURE__*/React__default.default.createElement(NextLink__default.default, _rollupPluginBabelHelpers.extends({
    ref: ref,
    href: localizedHref,
    prefetch: prefetch
  }, rest));
}
var BaseLink$1 = /*#__PURE__*/React.forwardRef(BaseLink);

exports.default = BaseLink$1;
