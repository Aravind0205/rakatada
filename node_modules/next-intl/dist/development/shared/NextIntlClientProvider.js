'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var router = require('next/router');
var React = require('react');
var _IntlProvider = require('use-intl/_IntlProvider');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function NextIntlClientProvider(_ref) {
  let {
    children,
    locale,
    now,
    ...rest
  } = _ref;
  let router$1;
  try {
    // Reading from context is practically ok to do conditionally
    // eslint-disable-next-line react-hooks/rules-of-hooks
    router$1 = router.useRouter();
  } catch (error) {
    // Calling `useRouter` is not supported in the app folder
  }

  // The router can be undefined if used in a context outside
  // of Next.js (e.g. unit tests, Storybook, ...)
  if (!locale && router$1) {
    locale = router$1.locale;
  }

  // TODO: This is no longer necessary, remove for stable release
  if (typeof now === 'string') {
    console.error('Passing an ISO date string to `NextIntlClientProvider` is deprecated since React Server Components have built-in support for serializing dates now. To upgrade, pass a `Date` instance instead.');
    now = new Date(now);
  }
  if (!locale) {
    throw new Error("Couldn't determine locale. Please pass an explicit `locale` prop the provider, or if you're using the `pages` folder, use internationalized routing (https://nextjs.org/docs/advanced-features/i18n-routing)." );
  }
  return /*#__PURE__*/React__default.default.createElement(_IntlProvider.IntlProvider, _rollupPluginBabelHelpers.extends({
    locale: locale,
    now: now
  }, rest), children);
}

exports.default = NextIntlClientProvider;
