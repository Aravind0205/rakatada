'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var useLocale = require('../react-client/useLocale.js');
var redirect = require('../server/react-client/redirect.js');
var utils = require('./utils.js');
var useRouter = require('../client/useRouter.js');
var usePathname = require('../client/usePathname.js');
var Link = require('../link/Link.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function createLocalizedPathnamesNavigation(_ref) {
  let {
    locales,
    pathnames
  } = _ref;
  function useTypedLocale() {
    return useLocale.default();
  }
  function Link$1(_ref2, ref) {
    let {
      href,
      locale,
      ...rest
    } = _ref2;
    const defaultLocale = useTypedLocale();
    const finalLocale = locale || defaultLocale;
    return /*#__PURE__*/React__default.default.createElement(Link.default, _rollupPluginBabelHelpers.extends({
      ref: ref,
      href: utils.compileLocalizedPathname({
        locale: finalLocale,
        // @ts-expect-error -- This is ok
        pathname: href,
        // @ts-expect-error -- This is ok
        params: typeof href === 'object' ? href.params : undefined,
        pathnames
      }),
      locale: locale
    }, rest));
  }
  const LinkWithRef = /*#__PURE__*/React.forwardRef(Link$1);
  LinkWithRef.displayName = 'Link';
  function redirect$1(href) {
    // eslint-disable-next-line react-hooks/rules-of-hooks -- Reading from context here is fine, since `redirect` should be called during render
    const locale = useTypedLocale();
    const resolvedHref = utils.compileLocalizedPathname({
      ...utils.normalizeNameOrNameWithParams(href),
      locale,
      pathnames
    });
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return redirect.default(resolvedHref, ...args);
  }
  function useRouter$1() {
    const baseRouter = useRouter.default();
    const defaultLocale = useTypedLocale();
    return {
      ...baseRouter,
      push(href) {
        var _args$;
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        const resolvedHref = utils.compileLocalizedPathname({
          ...utils.normalizeNameOrNameWithParams(href),
          locale: ((_args$ = args[0]) === null || _args$ === void 0 ? void 0 : _args$.locale) || defaultLocale,
          pathnames
        });
        return baseRouter.push(resolvedHref, ...args);
      },
      replace(href) {
        var _args$2;
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        const resolvedHref = utils.compileLocalizedPathname({
          ...utils.normalizeNameOrNameWithParams(href),
          locale: ((_args$2 = args[0]) === null || _args$2 === void 0 ? void 0 : _args$2.locale) || defaultLocale,
          pathnames
        });
        return baseRouter.replace(resolvedHref, ...args);
      },
      prefetch(href) {
        var _args$3;
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        const resolvedHref = utils.compileLocalizedPathname({
          ...utils.normalizeNameOrNameWithParams(href),
          locale: ((_args$3 = args[0]) === null || _args$3 === void 0 ? void 0 : _args$3.locale) || defaultLocale,
          pathnames
        });
        return baseRouter.prefetch(resolvedHref, ...args);
      }
    };
  }
  function usePathname$1() {
    const pathname = usePathname.default();
    const locale = useTypedLocale();
    return utils.getRoute({
      pathname,
      locale,
      pathnames
    });
  }
  return {
    Link: LinkWithRef,
    redirect: redirect$1,
    usePathname: usePathname$1,
    useRouter: useRouter$1
  };
}

exports.default = createLocalizedPathnamesNavigation;
