'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var headers = require('next/headers');
var React = require('react');
var constants = require('../shared/constants.js');

const getLocaleFromHeader = React.cache(() => {
  let locale;
  try {
    // A header is only set when we're changing the locale,
    // otherwise we reuse an existing one from the cookie.
    const requestHeaders = headers.headers();
    if (requestHeaders.has(constants.HEADER_LOCALE_NAME)) {
      locale = requestHeaders.get(constants.HEADER_LOCALE_NAME);
    } else {
      var _cookies$get;
      locale = (_cookies$get = headers.cookies().get(constants.COOKIE_LOCALE_NAME)) === null || _cookies$get === void 0 ? void 0 : _cookies$get.value;
    }
  } catch (error) {
    if (error instanceof Error && error.digest === 'DYNAMIC_SERVER_USAGE') {
      throw new Error('Usage of next-intl APIs in Server Components is currently only available for dynamic rendering (i.e. no `generateStaticParams`).\n\nSupport for static rendering is under consideration, please refer to the roadmap: https://next-intl-docs.vercel.app/docs/getting-started/app-router-server-components#roadmap', {
        cause: error
      });
    } else {
      throw error;
    }
  }
  if (!locale) {
    throw new Error('Unable to find `next-intl` locale, have you configured the middleware?`' );
  }
  return locale;
});
var getLocaleFromHeader$1 = getLocaleFromHeader;

exports.default = getLocaleFromHeader$1;
