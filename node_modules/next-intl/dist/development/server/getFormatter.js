'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('use-intl/core');
var getConfig = require('./getConfig.js');
var getLocaleFromHeader = require('./getLocaleFromHeader.js');

let hasWarnedForMissingLocale = false;
let hasWarnedForObjectArgument = false;

/**
 * Returns a formatter based on the given locale.
 *
 * The formatter automatically receives the request config, but
 * you can override it by passing in additional options.
 */
const getFormatter = React.cache(async locale => {
  if (typeof locale === 'object') {
    locale = locale.locale;
    if (!hasWarnedForObjectArgument) {
      hasWarnedForObjectArgument = true;
      console.warn("\nDEPRECATION WARNING: Calling `getFormatter` with an object argument is deprecated, please update your call site accordingly.\n\n// Previously\ngetFormatter({locale: 'en'});\n\n// Now\ngetFormatter('en');\n\nSee also https://next-intl-docs.vercel.app/docs/environments/metadata-route-handlers\n");
    }
  }
  if (!locale) {
    locale = getLocaleFromHeader.default();
    if (!hasWarnedForMissingLocale) {
      hasWarnedForMissingLocale = true;
      console.warn("\nCalling `getFormatter` without a locale is deprecated, please update the call:\n\n// app/[locale]/layout.tsx\nexport async function generateMetadata({params}) {\n  const t = await getFormatter(params.locale);\n\n  // ...\n}\n\nLearn more: https://next-intl-docs.vercel.app/docs/environments/metadata-route-handlers\n");
    }
  }
  const config = await getConfig.default(locale);
  return core.createFormatter(config);
});
var getFormatter$1 = getFormatter;

exports.default = getFormatter$1;
