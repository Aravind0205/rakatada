'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var intlLocalematcher = require('@formatjs/intl-localematcher');
var Negotiator = require('negotiator');
var constants = require('../shared/constants.js');
var utils = require('./utils.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var Negotiator__default = /*#__PURE__*/_interopDefault(Negotiator);

function findDomainFromHost(requestHeaders, domains) {
  var _host;
  let host = utils.getHost(requestHeaders);

  // Remove port (easier for local development)
  host = (_host = host) === null || _host === void 0 ? void 0 : _host.replace(/:\d+$/, '');
  if (host && domains) {
    return domains.find(cur => cur.domain === host);
  }
  return undefined;
}
function getAcceptLanguageLocale(requestHeaders, locales, defaultLocale) {
  let locale;
  const languages = new Negotiator__default.default({
    headers: {
      'accept-language': requestHeaders.get('accept-language') || undefined
    }
  }).languages();
  try {
    locale = intlLocalematcher.match(languages, locales, defaultLocale);
  } catch (e) {
    // Invalid language
  }
  return locale;
}
function resolveLocaleFromPrefix(_ref, requestHeaders, requestCookies, pathname) {
  let {
    defaultLocale,
    localeDetection,
    locales
  } = _ref;
  let locale;

  // Prio 1: Use route prefix
  if (pathname) {
    const pathLocale = utils.getLocaleFromPathname(pathname);
    if (locales.includes(pathLocale)) {
      locale = pathLocale;
    }
  }

  // Prio 2: Use existing cookie
  if (!locale && localeDetection && requestCookies) {
    if (requestCookies.has(constants.COOKIE_LOCALE_NAME)) {
      var _requestCookies$get;
      const value = (_requestCookies$get = requestCookies.get(constants.COOKIE_LOCALE_NAME)) === null || _requestCookies$get === void 0 ? void 0 : _requestCookies$get.value;
      if (value && locales.includes(value)) {
        locale = value;
      }
    }
  }

  // Prio 3: Use the `accept-language` header
  if (!locale && localeDetection && requestHeaders) {
    locale = getAcceptLanguageLocale(requestHeaders, locales, defaultLocale);
  }

  // Prio 4: Use default locale
  if (!locale) {
    locale = defaultLocale;
  }
  return locale;
}
function resolveLocaleFromDomain(config, requestHeaders, requestCookies, pathname) {
  const {
    domains
  } = config;
  const localeFromPrefixStrategy = resolveLocaleFromPrefix(config, requestHeaders, requestCookies, pathname);

  // Prio 1: Use a domain
  if (domains) {
    const domain = findDomainFromHost(requestHeaders, domains);
    const hasLocalePrefix = pathname && pathname.startsWith("/".concat(localeFromPrefixStrategy));
    if (domain) {
      return {
        locale: utils.isLocaleSupportedOnDomain(localeFromPrefixStrategy, domain) || hasLocalePrefix ? localeFromPrefixStrategy : domain.defaultLocale,
        domain
      };
    }
  }

  // Prio 2: Use prefix strategy
  return {
    locale: localeFromPrefixStrategy
  };
}
function resolveLocale(config, requestHeaders, requestCookies, pathname) {
  if (config.domains) {
    return resolveLocaleFromDomain(config, requestHeaders, requestCookies, pathname);
  } else {
    return {
      locale: resolveLocaleFromPrefix(config, requestHeaders, requestCookies, pathname)
    };
  }
}

exports.default = resolveLocale;
