'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var navigation = require('next/navigation');
var React = require('react');
var useLocale = require('../react-client/useLocale.js');
var utils = require('../shared/utils.js');

/**
 * Returns a wrapped instance of `useRouter` from `next/navigation` that
 * will automatically localize the `href` parameters it receives.
 *
 * @example
 * ```tsx
 * 'use client';
 *
 * import {useRouter} from 'next-intl/client';
 *
 * const router = useRouter();
 *
 * // When the user is on `/en`, the router will navigate to `/en/about`
 * router.push('/about');
 *
 * // Optionally, you can switch the locale by passing the second argument
 * router.push('/about', {locale: 'de'});
 * ```
 */
function useRouter() {
  const router = navigation.useRouter();
  const locale = useLocale.default();
  return React.useMemo(() => {
    function localize(href, nextLocale) {
      return utils.localizeHref(href, nextLocale || locale, locale, window.location.pathname);
    }
    return {
      ...router,
      push(href, options) {
        const {
          locale: nextLocale,
          ...rest
        } = options || {};
        const args = [localize(href, nextLocale)];
        if (Object.keys(rest).length > 0) {
          args.push(rest);
        }
        return router.push(...args);
      },
      replace(href, options) {
        const {
          locale: nextLocale,
          ...rest
        } = options || {};
        const args = [localize(href, nextLocale)];
        if (Object.keys(rest).length > 0) {
          args.push(rest);
        }
        return router.replace(...args);
      },
      prefetch(href, options) {
        const {
          locale: nextLocale,
          ...rest
        } = options || {};
        const args = [localize(href, nextLocale)];
        if (Object.keys(rest).length > 0) {
          // @ts-expect-error TypeScript thinks `rest` can be an empty object
          args.push(rest);
        }
        return router.prefetch(...args);
      }
    };
  }, [locale, router]);
}

exports.default = useRouter;
