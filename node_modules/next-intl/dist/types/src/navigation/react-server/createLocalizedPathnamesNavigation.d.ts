/// <reference types="node" />
import React from 'react';
import { AllLocales, Pathnames } from '../../shared/types';
import { HrefOrHrefWithParams } from '../utils';
export default function createLocalizedPathnamesNavigation<Locales extends AllLocales, PathnamesConfig extends Pathnames<Locales>>({ locales, pathnames }: {
    locales: Locales;
    pathnames: Pathnames<Locales>;
}): {
    Link: <Pathname extends keyof PathnamesConfig>({ href, locale, ...rest }: Omit<Omit<Omit<Omit<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof {
        href: string | import("url").UrlObject;
        as?: (string | import("url").UrlObject) | undefined;
        replace?: boolean | undefined;
        scroll?: boolean | undefined;
        shallow?: boolean | undefined;
        passHref?: boolean | undefined;
        prefetch?: boolean | undefined;
        locale?: string | false | undefined;
        legacyBehavior?: boolean | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
    }> & {
        href: string | import("url").UrlObject;
        as?: (string | import("url").UrlObject) | undefined;
        replace?: boolean | undefined;
        scroll?: boolean | undefined;
        shallow?: boolean | undefined;
        passHref?: boolean | undefined;
        prefetch?: boolean | undefined;
        locale?: string | false | undefined;
        legacyBehavior?: boolean | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
    } & {
        children?: React.ReactNode;
    } & React.RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale: string;
    }, "ref"> & React.RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale?: string | undefined;
    }, "href" | "name"> & {
        href: Pathname extends `${string}[[...${string}` ? Pathname | ({
            pathname: Pathname;
            params?: import("../StrictParams").default<Pathname> | undefined;
        } & Omit<import("url").UrlObject, "pathname">) : Pathname extends `${string}[${string}` ? {
            pathname: Pathname;
            params: import("../StrictParams").default<Pathname>;
        } & Omit<import("url").UrlObject, "pathname"> : Pathname | ({
            pathname: Pathname;
        } & Omit<import("url").UrlObject, "pathname">);
        locale?: Locales[number] | undefined;
    }) => JSX.Element;
    redirect: <Pathname_1 extends keyof PathnamesConfig>(href: HrefOrHrefWithParams<Pathname_1>, type?: import("next/dist/client/components/redirect").RedirectType | undefined) => never;
    usePathname: () => never;
    useRouter: () => never;
};
