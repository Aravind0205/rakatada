/// <reference types="react" />
/// <reference types="node" />
import redirect from '../../server/redirect';
import { AllLocales } from '../../shared/types';
export default function createSharedPathnamesNavigation<Locales extends AllLocales>(opts: {
    locales: Locales;
}): {
    Link: ({ locale, ...rest }: Omit<Omit<Omit<Omit<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, keyof {
        href: string | import("url").UrlObject;
        as?: (string | import("url").UrlObject) | undefined;
        replace?: boolean | undefined;
        scroll?: boolean | undefined;
        shallow?: boolean | undefined;
        passHref?: boolean | undefined;
        prefetch?: boolean | undefined;
        locale?: string | false | undefined;
        legacyBehavior?: boolean | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLAnchorElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLAnchorElement> | undefined;
    }> & {
        href: string | import("url").UrlObject;
        as?: (string | import("url").UrlObject) | undefined;
        replace?: boolean | undefined;
        scroll?: boolean | undefined;
        shallow?: boolean | undefined;
        passHref?: boolean | undefined;
        prefetch?: boolean | undefined;
        locale?: string | false | undefined;
        legacyBehavior?: boolean | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLAnchorElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLAnchorElement> | undefined;
    } & {
        children?: import("react").ReactNode;
    } & import("react").RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale: string;
    }, "ref"> & import("react").RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale?: Locales[number] | undefined;
    }) => JSX.Element;
    redirect: typeof redirect;
    usePathname: () => never;
    useRouter: () => never;
};
