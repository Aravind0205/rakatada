import { AllLocales } from '../shared/types';
import { DomainConfig, MiddlewareConfigWithDefaults } from './NextIntlMiddlewareConfig';
export declare function getLocaleFromPathname(pathname: string): string;
export declare function getInternalTemplate<Locales extends AllLocales, Pathnames extends NonNullable<MiddlewareConfigWithDefaults<Locales>['pathnames']>>(pathnames: Pathnames, pathname: string): [Locales[number] | undefined, keyof Pathnames | undefined];
export declare function formatTemplatePathname(sourcePathname: string, sourceTemplate: string, targetTemplate: string, localePrefix?: string): string;
/**
 * Removes potential locales from the pathname.
 */
export declare function getNormalizedPathname<Locales extends AllLocales>(pathname: string, locales: Locales): string;
export declare function getKnownLocaleFromPathname<Locales extends AllLocales>(pathname: string, locales: Locales): Locales[number] | undefined;
export declare function getBasePath(pathname: string, pathLocale: string): string;
export declare function getRouteParams(template: string, pathname: string): Record<string, string> | undefined;
export declare function formatPathname(template: string, params?: object): string;
export declare function getPathWithSearch(pathname: string, search: string | undefined): string;
export declare function getHost(requestHeaders: Headers): string | undefined;
export declare function isLocaleSupportedOnDomain<Locales extends AllLocales>(locale: string, domain: DomainConfig<Locales>): boolean;
export declare function getBestMatchingDomain<Locales extends AllLocales>(curHostDomain: DomainConfig<Locales> | undefined, locale: string, domainConfigs: Array<DomainConfig<Locales>>): DomainConfig<Locales> | undefined;
